<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Wood's Linux Zen</title><link href="http://localhost/" rel="alternate"></link><link href="http://localhost/feeds/Linux,nginx,%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.atom.xml" rel="self"></link><id>http://localhost/</id><updated>2012-02-09T17:35:00+08:00</updated><entry><title>nginx+keepalived配置高可用HTTP群集</title><link href="http://localhost/nginxkeepalivedpei-zhi-gao-ke-yong-httpqun-ji.html" rel="alternate"></link><updated>2012-02-09T17:35:00+08:00</updated><author><name>Wood</name></author><id>tag:localhost,2012-02-09:nginxkeepalivedpei-zhi-gao-ke-yong-httpqun-ji.html</id><summary type="html">&lt;p&gt;Nginx不仅是一款优秀的WEB服务器,同时可以根据nginx的反代理可以配置成强大的负载均衡器.这里就介绍如何把nginx配置成负载均衡器,并结合keepalived配置高可用的集群.
一般集群主要架构为:&lt;/p&gt;
&lt;p&gt;前端为负载均衡器两个:主/备,两种工作方式,一种是备机待机状态,主机故障时备机接管主机工作实现故障庄毅,在主机故障恢复完成时备机继续仅需待机状态,第二种是主备同时工作,一台宕机另外一台自动接管另一台的工作实现故障转移.
第一种方式可以通过将域名解析到一个虚拟ip(vip)上,主负载均衡器绑定虚拟ip,当主负载均衡器出现故障时,通过keepalived自动将vip绑定到备用负载均衡器上同时arping网关刷新MAC地址.,避免单点故障.
第二种方式主备同时绑定一个vip,把域名通过DNS轮询的方式解析到这两个服务器上,主机出现故障,备机就将主机绑定vip绑定到备机上,同时arping网关刷新MAC地址.实现故障转移.&lt;/p&gt;
&lt;p&gt;中间为WEB服务器作为real server,处理请求.
后端为数据库和分布式文件系统.数据库一般为主从两台.分布式文件系统有效解决WEB服务器之间的数据同步.有的还会将图片服务器单独分离出来放在后端.&lt;/p&gt;
&lt;p&gt;本文使用环境:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CentOS 5.5 32位&lt;/li&gt;
&lt;li&gt;nginx:nginx-1.0.11&lt;/li&gt;
&lt;li&gt;keepalived：keepalived-1.1.19.tar.gz&lt;/li&gt;
&lt;li&gt;主调度器:192.168.3.1&lt;/li&gt;
&lt;li&gt;备调度器:192.168.3.2&lt;/li&gt;
&lt;li&gt;real server:192.168.3.4/5/6&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文采用第一种方式来进行vip为:192.168.3.253&lt;/p&gt;
&lt;h2&gt;一、在主备服务器上部署nginx&lt;/h2&gt;
&lt;h3&gt;1.下载&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;wget http://nginx.org/download/nginx-1.0.11.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2.安装&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt; yum  -y install zlib-devel pcre-devel openssl-devel  # 安装依赖
tar -zxvf nginx-1.0.11.tar.gz
&lt;span class="nb"&gt;cd &lt;/span&gt;nginx-1.0.11
./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/nginx --with-http_ssl_module --with-http_flv_module --with-http_gzip_static_module
make &amp;amp;amp;&amp;amp;amp; make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.配置&lt;/p&gt;
&lt;p&gt;配置主调度器的nginx,编辑nginx.conf&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;vi /usr/local/nginx/conf/nginx.conf

http &lt;span class="o"&gt;{&lt;/span&gt;
    include       mime.types;
    default_type  application/octet-stream;

    &lt;span class="c"&gt;#log_format  main  &amp;#39;$remote_addr - $remote_user [$time_local] &amp;quot;$request&amp;quot; &amp;#39;&lt;/span&gt;
    &lt;span class="c"&gt;#                  &amp;#39;$status $body_bytes_sent &amp;quot;$http_referer&amp;quot; &amp;#39;&lt;/span&gt;
    &lt;span class="c"&gt;#                  &amp;#39;&amp;quot;$http_user_agent&amp;quot; &amp;quot;$http_x_forwarded_for&amp;quot;&amp;#39;;&lt;/span&gt;

    &lt;span class="c"&gt;#access_log  logs/access.log  main;&lt;/span&gt;

    sendfile        on;
    &lt;span class="c"&gt;#tcp_nopush     on;&lt;/span&gt;

    &lt;span class="c"&gt;#keepalive_timeout  0;&lt;/span&gt;
    keepalive_timeout  65;

    &lt;span class="c"&gt;#gzip  on;&lt;/span&gt;

    &lt;span class="c"&gt;# 添加一组真实的服务器地址池&lt;/span&gt;
    &lt;span class="c"&gt;# 供proxy_pass和fastcgi_pass指令中使用的代理服务器&lt;/span&gt;
    upstream real_server_pool &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="c"&gt;# 后台如果有动态应用的时候,ip_hash指令可以通过hash算法&lt;/span&gt;
      &lt;span class="c"&gt;# 将客户端请求定位到同一台后端服务器上,解决session共享,&lt;/span&gt;
      &lt;span class="c"&gt;# 但建议用动态应用做session共享&lt;/span&gt;
      &lt;span class="c"&gt;# ip_hash;&lt;/span&gt;

      &lt;span class="c"&gt;# server用于指定一个后端服务器的名称和参数&lt;/span&gt;
      &lt;span class="c"&gt;# weight代表权,重默认为1,权重越高被分配的客户端越多&lt;/span&gt;
      &lt;span class="c"&gt;# max_fails 指定时间内对后端请求失败的次数&lt;/span&gt;
      &lt;span class="c"&gt;# fail_timeout 达到max_fails指定的失败次数后暂停的时间&lt;/span&gt;
      server  192.168.3.4:80 &lt;span class="nv"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nv"&gt;max_fails&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2 &lt;span class="nv"&gt;fail_timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;30s;
      &lt;span class="c"&gt;# down参数用来标记为离线,不参与负载均衡.在ip_hash下使用&lt;/span&gt;
      &lt;span class="c"&gt;# 在此做演示,后面测试会去掉&lt;/span&gt;
      server  192.168.3.5:80 &lt;span class="nv"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nv"&gt;max_fails&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2 &lt;span class="nv"&gt;fail_timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;30s down;
      &lt;span class="c"&gt;# backup仅仅在非backup服务器宕机或繁忙的时候使用&lt;/span&gt;
      &lt;span class="c"&gt;# (在此做演示,后面测试会去掉)&lt;/span&gt;
      server  192.168.3.6:80 &lt;span class="nv"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nv"&gt;max_fails&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2 &lt;span class="nv"&gt;fail_timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;30s backup;
    &lt;span class="o"&gt;}&lt;/span&gt;
    server &lt;span class="o"&gt;{&lt;/span&gt;
        listen       192.168.3.1:80;
        server_name  localhost;

        &lt;span class="c"&gt;#charset koi8-r;&lt;/span&gt;

        &lt;span class="c"&gt;#access_log  logs/host.access.log  main;&lt;/span&gt;

        location / &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;#root   html;&lt;/span&gt;
            &lt;span class="c"&gt;#index  index.html index.htm;&lt;/span&gt;
            &lt;span class="c"&gt;# 使用upstream设置的一组代理服务器&lt;/span&gt;
            &lt;span class="c"&gt;# 如果后端服务器出现502或504等执行错误时,&lt;/span&gt;
            &lt;span class="c"&gt;# 将自动将请求转发给负载均衡池中的另一台服务器.&lt;/span&gt;
            proxy_next_upstream http_502 http_504 error timeout invalid_header;
            proxy_pass http://real_server_pool;
            proxy_set_header Host &lt;span class="nv"&gt;$host&lt;/span&gt;;
            proxy_set_header X-Forwarded-For &lt;span class="nv"&gt;$remote_addr&lt;/span&gt;;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(&lt;code&gt;注意:&lt;/code&gt;配置文件中注释ip_hash,以为ip_hash这个功能将保证这个客户端请求总是被转发到一台服务器上,所以如果启用了ip_hash指令,将不能再使用weight(权重参数),配置文件中加入为解释ip_hash指令)
配置备用nginx,将监听ip改为备用调度器的ip&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;http &lt;span class="o"&gt;{&lt;/span&gt;
    include       mime.types;
    default_type  application/octet-stream;

    &lt;span class="c"&gt;#log_format  main  &amp;#39;$remote_addr - $remote_user [$time_local] &amp;quot;$request&amp;quot; &amp;#39;&lt;/span&gt;
    &lt;span class="c"&gt;#                  &amp;#39;$status $body_bytes_sent &amp;quot;$http_referer&amp;quot; &amp;#39;&lt;/span&gt;
    &lt;span class="c"&gt;#                  &amp;#39;&amp;quot;$http_user_agent&amp;quot; &amp;quot;$http_x_forwarded_for&amp;quot;&amp;#39;;&lt;/span&gt;

    &lt;span class="c"&gt;#access_log  logs/access.log  main;&lt;/span&gt;

    sendfile        on;
    &lt;span class="c"&gt;#tcp_nopush     on;&lt;/span&gt;

    &lt;span class="c"&gt;#keepalive_timeout  0;&lt;/span&gt;
    keepalive_timeout  65;

    &lt;span class="c"&gt;#gzip  on;&lt;/span&gt;

    upstream real_server_pool &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="c"&gt;#ip_hash;&lt;/span&gt;
      server  192.168.3.4:80 &lt;span class="nv"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nv"&gt;max_fails&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2 &lt;span class="nv"&gt;fail_timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;30s;
      server  192.168.3.5:80 &lt;span class="nv"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nv"&gt;max_fails&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2 &lt;span class="nv"&gt;fail_timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;30s;
      server  192.168.3.6:80 &lt;span class="nv"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nv"&gt;max_fails&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2 &lt;span class="nv"&gt;fail_timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;30s;
    &lt;span class="o"&gt;}&lt;/span&gt;
    server &lt;span class="o"&gt;{&lt;/span&gt;
        listen       192.168.3.2:80;             &lt;span class="c"&gt;# 监听ip改为本地ip&lt;/span&gt;
        server_name  localhost;

        &lt;span class="c"&gt;#charset koi8-r;&lt;/span&gt;

        &lt;span class="c"&gt;#access_log  logs/host.access.log  main;&lt;/span&gt;

        location / &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;#root   html;&lt;/span&gt;
            &lt;span class="c"&gt;#index  index.html index.htm;&lt;/span&gt;
            proxy_next_upstream http_502 http_504 error timeout invalid_header;
            proxy_pass http://real_server_pool;
            proxy_set_header Host &lt;span class="nv"&gt;$host&lt;/span&gt;;
            proxy_set_header X-Forwarded-For &lt;span class="nv"&gt;$remote_addr&lt;/span&gt;;
        &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后启动主备nginx:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;/usr/local/nginx/sbin/nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;二、在主备服务器上部署keepalived&lt;/h2&gt;
&lt;p&gt;安装
安装依赖:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;yum -y install kernel-devel              &lt;span class="c"&gt;# 安装依赖&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;开启路由转发:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;vi /etc/sysctl.conf
net.ipv4.ip_forward &lt;span class="o"&gt;=&lt;/span&gt; 1 &lt;span class="c"&gt;# 此参数改为1&lt;/span&gt;
sysctl -p &lt;span class="c"&gt;# 使修改生效&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;首先安装ipvs:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;ln -s /usr/src/kernels/2.6.18-194.el5-i686/ /usr/src/linux  &lt;span class="c"&gt;# ipvs需要内核文件,做一个软连接&lt;/span&gt;
&lt;span class="c"&gt;# 下载&lt;/span&gt;
wget http://www.linuxvirtualserver.org/software/kernel-2.6/ipvsadm-1.24.tar.gz
tar -zxvf ipvsadm-1.24.tar.gz
&lt;span class="nb"&gt;cd &lt;/span&gt;ipvsadm-1.24
make
make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后安装keepalived&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 下载&lt;/span&gt;
wget http://www.keepalived.org/software/keepalived-1.1.19.tar.gz
tar -zxvf keepalived-1.1.19.tar.gz
&lt;span class="nb"&gt;cd &lt;/span&gt;keepalived-1.1.19
./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/ &lt;span class="se"&gt;\ &lt;/span&gt;           &lt;span class="c"&gt;# 安装在默认位置(配置文件,二进制文件,启动脚本放到默认位置)&lt;/span&gt;
--mandir&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/share/man/ &lt;span class="se"&gt;\&lt;/span&gt;
--with-kernel-dir&lt;span class="o"&gt;=&lt;/span&gt;/usr/src/kernels/2.6.18-194.el5-i686/    &lt;span class="c"&gt;# 需要内核的头文件&lt;/span&gt;
make &amp;amp;amp;&amp;amp;amp; make install
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;配置keepalived&lt;/h3&gt;
&lt;p&gt;编辑主调度器配置文件/etc/keepalived/keepalived.conf ###&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;global_defs &lt;span class="o"&gt;{&lt;/span&gt;
   notification_email &lt;span class="o"&gt;{&lt;/span&gt;
        cold_night@linuxzen.com             &lt;span class="c"&gt;# 定义通知邮箱,有多个可以换行添加&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
   notification_email_from root@linuxzen.com# 定义发送邮件的邮箱
   smtp_server www.linuxzen.com             &lt;span class="c"&gt;# 定义发件服务器&lt;/span&gt;
   smtp_connect_timeout 30                  &lt;span class="c"&gt;# 定义连接smtp服务器超时时间&lt;/span&gt;
   router_id LVS_DEVEL
&lt;span class="o"&gt;}&lt;/span&gt;

vrrp_instance VI_1 &lt;span class="o"&gt;{&lt;/span&gt;
    state MASTER                   &lt;span class="c"&gt;# 标示主备,备机上改为BACKUP&lt;/span&gt;
    interface eth0                 &lt;span class="c"&gt;# HA监测的端口&lt;/span&gt;
    virtual_router_id 51           &lt;span class="c"&gt;# 主备的virtual_router_id的值必须相同&lt;/span&gt;
    priority 100                   &lt;span class="c"&gt;# 优先级,通常主要比备稍大&lt;/span&gt;
    advert_int 1                   &lt;span class="c"&gt;# VRRP Multicast 广播周期秒数&lt;/span&gt;
    authentication &lt;span class="o"&gt;{&lt;/span&gt;               &lt;span class="c"&gt;# 定义认证&lt;/span&gt;
        auth_type PASS             &lt;span class="c"&gt;# 认证方式&lt;/span&gt;
        auth_pass 1111             &lt;span class="c"&gt;# 认证口令字&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    virtual_ipaddress &lt;span class="o"&gt;{&lt;/span&gt;            &lt;span class="c"&gt;# 定义vip&lt;/span&gt;
        192.168.3.253              &lt;span class="c"&gt;# 多个可换行添加,一行一个&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

virtual_server 192.168.3.253 80 &lt;span class="o"&gt;{&lt;/span&gt;
    delay_loop 6             &lt;span class="c"&gt;# 每隔 6 秒查询 realserver 状态&lt;/span&gt;
    lb_algo rr
    lb_kind NAT
    nat_mask 255.255.255.0
    persistence_timeout 50   &lt;span class="c"&gt;# 同一IP 的连接50秒内被分配到同一台realserver&lt;/span&gt;
    protocol TCP             &lt;span class="c"&gt;# 用TCP监测realserver的状态&lt;/span&gt;

    real_server 192.168.3.1 80 &lt;span class="o"&gt;{&lt;/span&gt;
        weight 3                &lt;span class="c"&gt;# 权重&lt;/span&gt;
        TCP_CHECK &lt;span class="o"&gt;{&lt;/span&gt;
            connect_timeout 10  &lt;span class="c"&gt;# 10秒无响应超时&lt;/span&gt;
            nb_get_retry 3
            delay_before_retry 3
            connect_port 80
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    real_server 192.168.3.2 80 &lt;span class="o"&gt;{&lt;/span&gt;
        weight 3
        TCP_CHECK &lt;span class="o"&gt;{&lt;/span&gt;
            connect_timeout 3
            delay_before_retry 3
            connect_port 80
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置备用调度器的keepalived,只需要将state MASTER 改为state BACKUP,降低priority 100 的值:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;global_defs &lt;span class="o"&gt;{&lt;/span&gt;
   notification_email &lt;span class="o"&gt;{&lt;/span&gt;
        cold_night@linuxzen.com
&lt;span class="o"&gt;}&lt;/span&gt;
   notification_email_from root@linuxzen.com
   smtp_server www.linuxzen.com
   smtp_connect_timeout 30
   router_id LVS_DEVEL
&lt;span class="o"&gt;}&lt;/span&gt;

vrrp_instance VI_1 &lt;span class="o"&gt;{&lt;/span&gt;
    state BACKUP                   &lt;span class="c"&gt;# 备机上改为BACKUP&lt;/span&gt;
    interface eth0
    virtual_router_id 51           &lt;span class="c"&gt;# 主备的virtual_router_id的值必须相同&lt;/span&gt;
    priority 99                    &lt;span class="c"&gt;# 备用优先级小于主调度器&lt;/span&gt;
    advert_int 1
    authentication &lt;span class="o"&gt;{&lt;/span&gt;
        auth_type PASS
        auth_pass 1111
    &lt;span class="o"&gt;}&lt;/span&gt;
    virtual_ipaddress &lt;span class="o"&gt;{&lt;/span&gt;
        192.168.3.253
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

virtual_server 192.168.3.253 80 &lt;span class="o"&gt;{&lt;/span&gt;
    delay_loop 6
   lb_algo rr
    lb_kind NAT
    nat_mask 255.255.255.0
    persistence_timeout 50
    protocol TCP        

    real_server 192.168.3.1 80 &lt;span class="o"&gt;{&lt;/span&gt;
        weight 3
        TCP_CHECK &lt;span class="o"&gt;{&lt;/span&gt;
            connect_timeout 10
            nb_get_retry 3
            delay_before_retry 3
            connect_port 80
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    real_server 192.168.3.2 80 &lt;span class="o"&gt;{&lt;/span&gt;
        weight 3
        TCP_CHECK &lt;span class="o"&gt;{&lt;/span&gt;
            connect_timeout 3
            delay_before_retry 3
            connect_port 80
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;主备上启动keepalived:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;service keepalived start
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;三、测试-----部署后端服务器&lt;/h2&gt;
&lt;p&gt;在后端服务器安装nginx,这里仅部署一台然后创建3个基于ip的虚拟主机供测试:
绑定ip:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;ifconfig eth0:1 192.168.3.4/24
ifconfig eth0:2 192.168.3.5/24
ifconfig eth0:3 192.168.3.6/24
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装nginx后编辑配置文件,在http块里添加:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;http &lt;span class="o"&gt;{&lt;/span&gt;
    server &lt;span class="o"&gt;{&lt;/span&gt;
        listen  192.168.3.4:80;
        server_name     192.168.3.4;

        location / &lt;span class="o"&gt;{&lt;/span&gt;
             root html/s1;
             index index.html index.htm;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    server &lt;span class="o"&gt;{&lt;/span&gt;
        listen  192.168.3.5:80;
        server_name     192.168.3.5;

        location / &lt;span class="o"&gt;{&lt;/span&gt;
            root html/s2;
            index index.html index.htm;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    server &lt;span class="o"&gt;{&lt;/span&gt;
        listen 192.168.3.6:80;
        server_name     192.168.3.5;

        location / &lt;span class="o"&gt;{&lt;/span&gt;
            root html/s3;
            index index.html index.htm;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建虚拟主机根目录,并创建不通的首页文档:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /usr/local/nginx/html/
mkdir s1 s2 s3
&lt;span class="nb"&gt;echo &lt;/span&gt;server1 &amp;amp;gt; s1/index.html
&lt;span class="nb"&gt;echo &lt;/span&gt;server2 &amp;amp;gt; s2/index.html
&lt;span class="nb"&gt;echo &lt;/span&gt;server3 &amp;amp;gt; s3/index.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动nginx:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;/usr/local/nginx/sbin/nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开浏览器访问&lt;code&gt;http://192.168.3.253&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;刷新会看到显示不同的内容:server1,server2,server3(生产中的服务器应该是一样的)
[gallery link="file" order="DESC"]
现在停掉主调度器的keepalived&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;pkill keepalived
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看备调度器的日志:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;cat /var/log/messages
Feb 10 16:36:27 cfhost Keepalived_vrrp: VRRP_Instance&lt;span class="o"&gt;(&lt;/span&gt;VI_1&lt;span class="o"&gt;)&lt;/span&gt; Transition to MASTER STATE
Feb 10 16:36:28 cfhost Keepalived_vrrp: VRRP_Instance&lt;span class="o"&gt;(&lt;/span&gt;VI_1&lt;span class="o"&gt;)&lt;/span&gt; Entering MASTER STATE
Feb 10 16:36:28 cfhost Keepalived_vrrp: VRRP_Instance&lt;span class="o"&gt;(&lt;/span&gt;VI_1&lt;span class="o"&gt;)&lt;/span&gt; setting protocol VIPs.
Feb 10 16:36:28 cfhost Keepalived_vrrp: VRRP_Instance&lt;span class="o"&gt;(&lt;/span&gt;VI_1&lt;span class="o"&gt;)&lt;/span&gt; Sending gratuitous ARPs on eth0 &lt;span class="k"&gt;for &lt;/span&gt;192.168.3.253
Feb 10 16:36:28 cfhost Keepalived_vrrp: Netlink reflector reports IP 192.168.3.253 added
Feb 10 16:36:28 cfhost Keepalived_healthcheckers: Netlink reflector reports IP 192.168.3.253 added
Feb 10 16:36:33 cfhost Keepalived_vrrp: VRRP_Instance&lt;span class="o"&gt;(&lt;/span&gt;VI_1&lt;span class="o"&gt;)&lt;/span&gt; Sending gratuitous ARPs on eth0 &lt;span class="k"&gt;for &lt;/span&gt;192.168.3.253
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;现在访问&lt;code&gt;http://192.168.3.253&lt;/code&gt;依然可以访问.
大家也看到了备机keepalived只有检测主机的keepalived停止的时候才会切换vip,而不是检测一台real server的某一服务(比如检测80端口的HTTP)切换vip,所以在nginx进程停止的时候,如果服务器没有宕机这时候就无法实现故障转移,所以我们编写一个检测nginx状态的脚本结合keepalived实现故障转移:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c"&gt;#filename:nsc.sh&lt;/span&gt;
ps aux ¦ grep nginx ¦ grep -v grep 2&amp;amp;gt; /dev/null 1&amp;amp;gt;&amp;amp;amp;2   &lt;span class="c"&gt;# 过滤nginx进程&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt; -eq 0 &lt;span class="o"&gt;]]&lt;/span&gt;               &lt;span class="c"&gt;# 如果过滤有nginx进程会返回0则认为nginx存活&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;sleep 5                     &lt;span class="c"&gt;# 使脚本进入休眠&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="c"&gt;# 如果nginx没有存活尝试启动nginx,如果失败则杀死keepalived的进程&lt;/span&gt;
    /usr/local/nginx/sbin/nginx
    ps aux ¦ grep nginx ¦ grep -v grep 2&amp;amp;gt; /dev/null 1&amp;amp;gt;&amp;amp;amp;2
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt; -eq 0 &lt;span class="o"&gt;]]&lt;/span&gt;
    &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;pkill keepalived
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后后台运行此脚本:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;nohup sh nsc.sh &amp;amp;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样就实现了群集的高可靠和高可用.&lt;/p&gt;</summary><category term="高可用"></category><category term="负载均衡"></category><category term="群集"></category><category term="反向代理"></category><category term="双机"></category><category term="nginx"></category><category term="keepalived"></category></entry></feed>